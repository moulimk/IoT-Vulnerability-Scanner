import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sqlite3
import sys
import os
from fpdf import FPDF  # Import FPDF for PDF generation

# Add the Gemini module to the path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from gemini.gemini import main as gemini_output

def generate_pdf(report_text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Add a title
    pdf.set_font("Arial", 'B', size=16)
    pdf.cell(200, 10, txt="Detailed Vulnerability Report", ln=True, align='C')

    # Add the report text
    pdf.set_font("Arial", size=12)
    for line in report_text.splitlines():
        pdf.multi_cell(0, 10, line)

    # Return the PDF as a binary string with utf-8 encoding
    return pdf.output(dest='S').encode('latin1', 'ignore')

def main():
    # Connect to the database and fetch vulnerability data
    with sqlite3.connect('data/devices.db') as conn:
        query = """
        SELECT
            vulnerabilities.unique_id,
            vulnerabilities.device_type,
            vulnerabilities.cve_id,
            vulnerabilities.severity,
            vulnerabilities.cvss_score
        FROM vulnerabilities
        """
        df = pd.read_sql_query(query, conn)
    
    st.title("Vulnerability Detector Report")
    
    col1, col2 = st.columns([2, 2])
    
    # Display device statistics in the first column
    with col1:
        st.markdown(f"""
        **Number of Devices:** {df['device_type'].nunique()}<br>
        **Number of Vulnerable Devices:** {df['device_type'].nunique()}<br>
        **Number of Low-Risk Vulnerabilities:** {df['severity'].value_counts().get('LOW', 0)}<br>
        **Number of High-Risk Vulnerabilities:** {df['severity'].value_counts().get('HIGH', 0)}
        """, unsafe_allow_html=True)
    
    # Display a pie chart of vulnerability severity in the second column
    with col2:
        fig, ax = plt.subplots(figsize=(5, 5), facecolor='grey') 
        sns.set_style("darkgrid")
    
        severity_counts = df['severity'].value_counts()
    
        explode = (0.1, 0.1, 0.1, 0.1)  
        ax.pie(severity_counts, labels=severity_counts.index, autopct='%1.1f%%', startangle=140, 
               colors=['#5dade2', '#f5d041', '#e74c3c', '#a3e4b7'], explode=explode)
    
        ax.set_title("Overall Safety")
        plt.legend()
    
        st.pyplot(fig)

    # Start report generation when the button is clicked
    if st.button("Start Report Generation"):
        st.markdown("## Detailed Vulnerability Report")
        with st.spinner('Generating report...'):
            try:
                response_text = gemini_output()
                st.write(response_text)  # Adjust based on response_text format

                # Store the generated PDF in the session state
                st.session_state.generated_pdf = generate_pdf(response_text)

            except Exception as e:
                st.error(f"An error occurred while generating the report: {e}")

    # Check if PDF has been generated
    if 'generated_pdf' in st.session_state:
        st.download_button(
            label="Download Report as PDF",
            data=st.session_state.generated_pdf,
            file_name="Vulnerability_Report.pdf",
            mime="application/pdf"
        )

if __name__ == "__main__":
    main()
