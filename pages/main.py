import argparse
import json
import sys
import os
# Add the project directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from scanning_module.arp_scanner import ARPScanner
from scanning_module.nmap_scanner import nmap_scan
from data.databse import initialize_database, insert_device, update_device_manufacturer
from scanning_module.device_identifier import DeviceIdentifier


def load_mock_data():
    with open('scanning_module/mock_data.json', 'r') as file:
        return json.load(file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--use-mock', action='store_true', help="Use mock data instead of actual scanning")
    parser.add_argument('--comprehensive', action='store_true', help="Run comprehensive Nmap scan")
    args = parser.parse_args()

    db_path = os.path.join(os.path.dirname(__file__), '../data/devices.db')
    initialize_database(db_path)

    identifier = DeviceIdentifier()
    scanner = ARPScanner()

    if args.use_mock:
        devices = load_mock_data()
        for device in devices:
            insert_device(db_path, device['ip_address'], device['mac_address'], device['manufacturer'], device['device_type'], 'Unknown', '', '', '', '')
        print("Using mock data for scanning.")
    else:
        devices = scanner.arp_scan()
        for device in devices:
            manufacturer, device_type = identifier.get_device_info(device['mac'])
            nmap_result = nmap_scan(device['ip'], comprehensive=args.comprehensive)
            insert_device(db_path, device['ip'], device['mac'], manufacturer, device_type, nmap_result['os'], nmap_result['ports'], nmap_result['protocols'], nmap_result['services'], nmap_result['versions'])
            print(f"Processed device: {device['ip']}, OS: {nmap_result['os']}, Services: {nmap_result['services']}")
