import sys
import os
import sqlite3
import streamlit as st

# Add the project directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from scanning_module.arp_scanner import ARPScanner
from scanning_module.nmap_scanner import nmap_scan
from scanning_module.mock_arp_output import mock_arp_output
from scanning_module.device_identifier import DeviceIdentifier
from data.databse import initialize_database, insert_device, update_device_manufacturer

# Initialize database
db_path = os.path.join(os.path.dirname(__file__), '../data/devices.db')
initialize_database(db_path)

# Initialize scanner and identifier
scanner = ARPScanner()
identifier = DeviceIdentifier()

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Main", "Device Details"])

# Ensure session state is initialized
if 'devices' not in st.session_state:
    st.session_state['devices'] = []  # Initialize as an empty list
if 'nmap_results' not in st.session_state:
    st.session_state['nmap_results'] = []

def format_field(data_list):
    """Format list of data items as a comma-separated string."""
    return ', '.join(data_list)

def insert_mock_data_to_db(mock_data, db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    for device in mock_data:
        # Format ports, protocols, services, and versions as comma-separated strings
        ports = format_field([str(port) for port in device.get('ports', [])])
        protocols = format_field(device.get('protocols', []))
        services = format_field([f"{service['service']} ({service['version']})" for service in device.get('services', [])])
        versions = format_field([service['version'] for service in device.get('services', [])])

        # Insert the device information
        cursor.execute('''INSERT INTO devices (ip_address, mac_address, manufacturer, device_type, os, ports, protocols, services, versions)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (device['ip_address'], device['mac_address'], device['manufacturer'], 
                        device['device_type'], device.get('os', 'Unknown'), ports, protocols, services, versions))

    conn.commit()
    conn.close()

if page == "Main":
    # Main page logic
    st.title("IoT Device Scanner")

    # Select interface dynamically
    interfaces = scanner.list_interfaces()
    selected_interface = st.selectbox("Select Network Interface", interfaces)

    if selected_interface:
        network = scanner.select_interface(selected_interface)
        st.write(f"Selected Interface: {selected_interface}")
        st.write(f"Network: {network}")

    # Option to select between live scan or mock data
    use_mock = st.checkbox("Use mock data")
    comprehensive_scan = st.checkbox("Run comprehensive scan (may take longer)")

    if st.button("Start Scan"):
        if use_mock:
            devices = mock_arp_output
            st.session_state['devices'] = devices
            st.success("Mock data loaded successfully.")
            # Insert mock data into the database
            insert_mock_data_to_db(mock_arp_output, db_path)
        else:
            # ARP Scan Progress Bar
            with st.spinner("Running ARP scan..."):
                arp_progress = st.progress(0)
                devices = scanner.arp_scan()
                
                # Debugging: Print the devices list
                st.write("ARP Scan Output:", devices)
                
                for idx, device in enumerate(devices):
                    if 'mac' in device:
                        st.session_state['devices'].append(device)
                    else:
                        st.error(f"Device missing 'mac' key: {device}")
                    arp_progress.progress((idx + 1) / len(devices))
                st.success("ARP scan completed successfully.")

            # Nmap Scan Progress Bar
            with st.spinner("Running Nmap scan..."):
                nmap_progress = st.progress(0)
                for idx, device in enumerate(st.session_state['devices']):
                    # Ensure 'mac' key exists before proceeding
                    if 'mac' in device:
                        manufacturer, device_type = identifier.get_device_info(device['mac'])
                        nmap_result = nmap_scan(device['ip'], comprehensive=comprehensive_scan)
                        insert_device(db_path, device['ip'], device['mac'], manufacturer, device_type, 
                                      nmap_result['os'], nmap_result['ports'], nmap_result['protocols'], 
                                      nmap_result['services'], nmap_result['versions'])
                    else:
                        st.error(f"Skipping Nmap scan for device without 'mac' key: {device}")
                    nmap_progress.progress((idx + 1) / len(st.session_state['devices']))
                st.success("Nmap scan completed successfully.")

            # Device Identification Progress Bar
            with st.spinner("Running Device Identification..."):
                identification_progress = st.progress(0)
                for idx, device in enumerate(st.session_state['devices']):
                    if 'mac' in device:
                        manufacturer, _ = identifier.get_device_info(device['mac'])
                        update_device_manufacturer(db_path, device['mac'], manufacturer)
                    else:
                        st.error(f"Skipping device identification for device without 'mac' key: {device}")
                    identification_progress.progress((idx + 1) / len(st.session_state['devices']))
                st.success("Device identification completed successfully.")

        st.write("Scans completed. You can view the details on the 'Device Details' page.")

elif page == "Device Details":
    # If navigating to Device Details page, load the module
    from pages import device_details
    device_details.show_device_details_page()
