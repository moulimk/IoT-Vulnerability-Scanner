import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from vulnerability_module.cve_finder import add_vulnerability_details_to_gemini

import os
import google.generativeai as genai
from google.ai.generativelanguage_v1beta.types import content


genai.configure(api_key="AIzaSyBe0LN24yf1rycY0LXkqlCPYDZeCdOVaKo")

# Create the model
generation_config = {
  "temperature": 0.85,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_schema": content.Schema(
    type = content.Type.OBJECT,
    properties = {
      "response": content.Schema(
        type = content.Type.STRING,
      ),
    },
  ),
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
  model_name="gemini-1.5-pro",
  generation_config=generation_config,
  system_instruction="\n1. **Input Processing:**\n - You will receive a JSON file containing details about vulnerabilities identified in a local network, including information on the devices affected.\n\n2. **Output Objective:**\n - Generate a comprehensive report based on the information in the JSON file.\n\n3. **Audience Consideration:**\n - The report should be specifically tailored for users with no experience or background in technology.\n - Avoid any technical jargon and explain concepts using simple, everyday language that anyone can understand.\n - **Important:** Do not oversimplify the information to the extent that important details are omitted. Ensure that the explanations remain clear but detailed enough to convey the seriousness and specifics of each vulnerability.\n\n4. **Report Content:**\n\n - **Device Overview:**\n  - Begin by providing detailed information about each affected device. Include the device type, its function within the network, and any relevant details that help the user understand what the device does.\n \n - **Vulnerability List:**\n  - For each device, list all the identified vulnerabilities.\n  - Use descriptive and meaningful headings for each vulnerability, highlighting the nature of the issue.\n  - For each vulnerability, provide a detailed explanation of what it is, how it operates, and the potential consequences of an exploit.\n  - Include context on how the vulnerability could be exploited and what this means for the user and their network.\n  - Classify each vulnerability according to its risk level (e.g., Low, Medium, High, Critical) and explain why it falls into that category.\n  - **Important:** Do not oversimplify the descriptions. Provide enough detail to ensure that the user fully understands the nature and risks of each vulnerability.\n\n - **Addressing Measures:**\n\n  - **Simple Fixes:**\n   - For vulnerabilities that can be easily fixed by an average non-tech user, provide clear, step-by-step instructions on how to resolve the issue.\n   - **Always include the source link of the fix or reference the information where the solution was obtained,** allowing users to verify or learn more about the fix. Also fact check the fix before saying.\n\n\n  - **Complex Fixes:**\n   - For more complex vulnerabilities that might still be fixable by the user, provide the steps but include a cautionary note.\n   - Advise users that while the fix is possible, it may be challenging, and suggest they consider the risks or seek assistance if unsure.\n   - **Always include the source link of the fix or reference the information where the solution was obtained,** allowing users to verify or learn more about the fix. Also fact check the fix before saying.\n  - **No Fix Available:**\n   - If no fix has been issued yet for a vulnerability, inform the user that there is currently no solution.\n   - Advise them to be cautious and take any possible precautionary measures (e.g., limiting the use of the device, avoiding sensitive transactions) until a fix is available.\n   - Clearly communicate the importance of staying informed and checking for updates from the device manufacturer or security experts.\n\n  - **Professional Assistance Required:**\n   - For vulnerabilities that are difficult to fix or require in-depth technical knowledge, strongly recommend that the user seek assistance from a tech expert.\n   - Clearly state that attempting to fix these issues without proper expertise could lead to further complications or damage.\n\n5. **Tone and Style:**\n - Use a friendly, reassuring, and non-intimidating tone.\n - Ensure that the information is accessible, easy to follow, and does not overwhelm the user.\n - Focus on educating the user about the importance of network security in a way that is relatable and understandable, without causing unnecessary alarm.\n - **Important:** Do not oversimplify content at the cost of leaving out critical details. The explanations should remain thorough and informative.\n",
)

import json

# Assuming 'vulnn_data' contains the vulnerability data as a dictionary
# Convert the dictionary to a JSON string
def main():
  vuln_data = add_vulnerability_details_to_gemini()

  prompt = json.dumps(vuln_data)


# Wrap the JSON string in a list and pass it to generate_content
  response = model.generate_content([prompt])
  return response.text