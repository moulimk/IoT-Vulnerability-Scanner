import sqlite3
import os
from datetime import datetime, timedelta

# Paths to databases
devices_db_path = os.path.join(os.path.dirname(__file__), 'devices.db')
history_db_path = os.path.join(os.path.dirname(__file__), 'history.db')

# Create the history.db with the required schema, including the created_at column
def initialize_history_db(history_db_path):
    conn = sqlite3.connect(history_db_path)
    cursor = conn.cursor()
    
    # Create devices table with created_at column
    cursor.execute('''CREATE TABLE IF NOT EXISTS devices (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        ip_address TEXT,
                        mac_address TEXT,
                        manufacturer TEXT,
                        device_type TEXT,
                        os TEXT,
                        ports TEXT,
                        protocols TEXT,
                        services TEXT,
                        versions TEXT,
                        created_at TEXT
                    )''')

    # Create vulnerabilities table
    cursor.execute('''CREATE TABLE IF NOT EXISTS vulnerabilities (
                        id TEXT PRIMARY KEY,
                        device_type TEXT NOT NULL,
                        source_identifier TEXT,
                        published DATE,
                        last_modified DATE,
                        vuln_status TEXT,
                        description TEXT,
                        cvss_score REAL,
                        severity TEXT,
                        attack_vector TEXT,
                        attack_complexity TEXT,
                        privileges_required TEXT,
                        user_interaction TEXT,
                        scope TEXT,
                        confidentiality_impact TEXT,
                        integrity_impact TEXT,
                        availability_impact TEXT,
                        exploitability_score REAL,
                        impact_score REAL,
                        FOREIGN KEY (device_type) REFERENCES devices (device_type)
                    )''')

    conn.commit()
    conn.close()

def transfer_data(devices_db_path, history_db_path):
    # Initialize history.db if not already initialized
    initialize_history_db(history_db_path)

    conn_devices = sqlite3.connect(devices_db_path)
    conn_history = sqlite3.connect(history_db_path)
    cursor_devices = conn_devices.cursor()
    cursor_history = conn_history.cursor()

    # Transfer devices data, including the created_at timestamp
    cursor_devices.execute("SELECT * FROM devices")
    devices_data = cursor_devices.fetchall()
    for device in devices_data:
        cursor_history.execute('''INSERT INTO devices (ip_address, mac_address, manufacturer, device_type, os, ports, protocols, services, versions, created_at)
                                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                               (device[1], device[2], device[3], device[4], device[5], device[6], device[7], device[8], device[9], datetime.now().strftime('%Y-%m-%d %H:%M:%S')))

    # Transfer vulnerabilities data
    cursor_devices.execute("SELECT * FROM vulnerabilities")
    vulnerabilities_data = cursor_devices.fetchall()
    for vuln in vulnerabilities_data:
        cursor_history.execute('''INSERT INTO vulnerabilities (id, device_type, source_identifier, published, last_modified, vuln_status, description, 
                                  cvss_score, severity, attack_vector, attack_complexity, privileges_required, user_interaction, scope, 
                                  confidentiality_impact, integrity_impact, availability_impact, exploitability_score, impact_score)
                                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                               (vuln[0], vuln[1], vuln[2], vuln[3], vuln[4], vuln[5], vuln[6], vuln[7], vuln[8], vuln[9], vuln[10], 
                                vuln[11], vuln[12], vuln[13], vuln[14], vuln[15], vuln[16], vuln[17], vuln[18]))

    conn_history.commit()

    # Empty the devices.db database
    cursor_devices.execute("DELETE FROM devices")
    cursor_devices.execute("DELETE FROM vulnerabilities")
    conn_devices.commit()

    conn_devices.close()
    conn_history.close()

def cleanup_history_db(history_db_path, retention_period_days):
    # Ensure history.db is initialized before cleanup
    initialize_history_db(history_db_path)

    conn = sqlite3.connect(history_db_path)
    cursor = conn.cursor()

    cutoff_date = datetime.now() - timedelta(days=retention_period_days)
    
    # Remove old vulnerabilities based on the last_modified date
    cursor.execute("DELETE FROM vulnerabilities WHERE datetime(last_modified) < ?", (cutoff_date,))
    
    # Cleanup devices based on created_at column
    cursor.execute("DELETE FROM devices WHERE datetime(created_at) < ?", (cutoff_date,))

    conn.commit()
    conn.close()
