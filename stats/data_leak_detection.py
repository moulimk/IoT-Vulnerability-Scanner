import pyshark
import re

def parse_pcap(file_path):
    """
    Parse the uploaded PCAP file and inspect it for sensitive data.

    Args:
        file_path (str): The path to the uploaded PCAP file.

    Returns:
        list: A list of sensitive data findings, each as a dictionary containing relevant details.
    """
    findings = []
    try:
        # Use pyshark to process the file from the given path
        cap = pyshark.FileCapture(file_path, display_filter="http or tcp")

        # Define patterns for sensitive data detection
        patterns = {
            'email': re.compile(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'),
            'credit_card': re.compile(r'\b(?:\d[ -]*?){13,16}\b'),
            'password': re.compile(r'password=([^&]+)')
            # Add more patterns as needed
        }

        for packet in cap:
            if hasattr(packet, 'http'):
                http_payload = str(packet.http)
                
                # Check for sensitive data in the HTTP payload
                for key, pattern in patterns.items():
                    match = pattern.search(http_payload)
                    if match:
                        findings.append({
                            'type': key,
                            'data': match.group(),
                            'packet_info': packet.highest_layer,
                            'timestamp': packet.sniff_time
                        })

        cap.close()
    except Exception as e:
        return f"Error processing the PCAP file: {str(e)}"
    
    return findings


def generate_report(findings):
    """
    Generate a summary report of the findings from the PCAP analysis.

    Args:
        findings (list): A list of detected sensitive data.

    Returns:
        str: A formatted report of the findings.
    """
    if not findings:
        return "No sensitive data found in the network traffic."

    report = "Sensitive Data Detected in Network Traffic:\n"
    for item in findings:
        report += f"- Type: {item['type']}\n"
        report += f"  Data: {item['data']}\n"
        report += f"  Detected in: {item['packet_info']}\n"
        report += f"  Timestamp: {item['timestamp']}\n"
        report += "-----------------------\n"

    return report
