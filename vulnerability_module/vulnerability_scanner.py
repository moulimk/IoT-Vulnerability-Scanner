import json
import sqlite3
import os

def load_vulnerability_data():
    json_file_path = os.path.join("data", "vulnerabilities.json")
    with open(json_file_path, "r") as file:
        data = json.load(file)
    return data["vulnerabilities"]

def match_vulnerabilities(devices):
    vulnerabilities = load_vulnerability_data()
    conn = sqlite3.connect(os.path.join("data", "devices.db"))
    cursor = conn.cursor()

    for vuln in vulnerabilities:
        cve_id = vuln["cve"]["id"]
        description = vuln["cve"]["descriptions"][0]["value"]
        published = vuln["cve"]["published"]
        last_modified = vuln["cve"]["lastModified"]
        vuln_status = vuln["cve"]["vulnStatus"]
        source_identifier = vuln["cve"]["sourceIdentifier"]

        metrics = vuln.get("cve", {}).get("metrics", {}).get("cvssMetricV2", [])[0].get("cvssData", {})
        cvss_score = metrics.get("baseScore", None)
        severity = metrics.get("baseSeverity", None)
        attack_vector = metrics.get("accessVector", None)
        attack_complexity = metrics.get("accessComplexity", None)
        privileges_required = metrics.get("authentication", None)
        user_interaction = metrics.get("userInteractionRequired", None)
        scope = None  # Not provided in CVSS v2, typically in CVSS v3
        confidentiality_impact = metrics.get("confidentialityImpact", None)
        integrity_impact = metrics.get("integrityImpact", None)
        availability_impact = metrics.get("availabilityImpact", None)
        exploitability_score = metrics.get("exploitabilityScore", None)
        impact_score = metrics.get("impactScore", None)

        for config in vuln["cve"]["configurations"]:
            for node in config["nodes"]:
                for match in node["cpeMatch"]:
                    if match["vulnerable"]:
                        device_type = match["criteria"].split(":")[4]  # Extracting device type from CPE string
                        cursor.execute("""
                            INSERT OR REPLACE INTO vulnerabilities (
                                id, device_type, source_identifier, published, last_modified, vuln_status,
                                description, cvss_score, severity, attack_vector, attack_complexity,
                                privileges_required, user_interaction, scope, confidentiality_impact,
                                integrity_impact, availability_impact, exploitability_score, impact_score
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            cve_id, device_type, source_identifier, published, last_modified, vuln_status,
                            description, cvss_score, severity, attack_vector, attack_complexity,
                            privileges_required, user_interaction, scope, confidentiality_impact,
                            integrity_impact, availability_impact, exploitability_score, impact_score
                        ))

    conn.commit()
    conn.close()

def scan_for_vulnerabilities():
    conn = sqlite3.connect(os.path.join("data", "devices.db"))
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT device_type FROM devices")
    devices = cursor.fetchall()
    conn.close()

    match_vulnerabilities(devices)
    print("Vulnerability scan completed.")
