import requests
from bs4 import BeautifulSoup
import sqlite3


def perform_cpe_search(search_string):
    # Replaces spaces with '+' for URL encoding
    query = search_string.replace(' ', '+')
    base_url = f"https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword={query}"
    response = requests.get(base_url)
    return response.text

def extract_cpe_link(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    # Find the anchor tag containing the CPE name
    cpe_link = soup.find('a', href=True, text=lambda x: x and 'cpe:2.3' in x)
    if cpe_link:
        return "https://nvd.nist.gov" + cpe_link['href']
    return None

def get_cpe_detail_page_url(cpe_url):
    if cpe_url:
        return cpe_url
    return "CPE URL not found"


def find_cpes(s):
    cpes = {}
    for device_id, strings in s.items():
        found_cpe = False
        for string in strings:
            if found_cpe:
                break
            html_content = perform_cpe_search(string)
            cpe_url = extract_cpe_link(html_content)
            detail_page_url = get_cpe_detail_page_url(cpe_url)
            if cpe_url:
                cpes[device_id] = cpe_url
                found_cpe = True
            #print(f"Device ID: {device_id}, Search String: '{string}', Detail Page URL: {detail_page_url}")
    return cpes

import requests
from bs4 import BeautifulSoup

def scrape_cpe_name_from_page(cpe_urls):
    cpe_names = {}
    for device_id, url in cpe_urls.items():
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Using specific attributes to target the span element containing the CPE name
        cpe_name_element = soup.find('span', {'class': 'label label-info', 'data-testid': 'cpe-name-2-3'})
        if cpe_name_element:
            cpe_name = cpe_name_element.text.strip()
            cpe_names[device_id] = cpe_name
        else:
            cpe_names[device_id] = "CPE name not found"
        
        print(f"Device ID: {device_id}, CPE Name: {cpe_names[device_id]}")

    return cpe_names

def update_vulnerabilities(cpe_names):
    conn = sqlite3.connect('data/devices.db')
    cursor = conn.cursor()

    # SQL to fetch device_type
    fetch_device_type_sql = '''
    SELECT device_type FROM devices WHERE id = ?
    '''

    # SQL statement for updating or inserting new vulnerabilities
    update_sql = '''
    INSERT INTO CPE (id, device_type, cpe_name)
    VALUES (?, ?, ?)
    ON CONFLICT(id) DO UPDATE SET
    device_type = excluded.device_type,
    cpe_name = excluded.cpe_name;
    '''

    try:
        for device_id, cpe_name in cpe_names.items():
            # Fetch device_type for the current device_id
            cursor.execute(fetch_device_type_sql, (device_id,))
            device_type_result = cursor.fetchone()
            if device_type_result:
                device_type = device_type_result[0]
                # Execute the update
                cursor.execute(update_sql, (device_id, device_type, cpe_name))
            else:
                print(f"No device type found for device ID {device_id}")

        conn.commit()
        print("CPE information updated successfully.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
        conn.rollback()
    finally:
        conn.close()











