import psutil
import socket
import ipaddress
from scapy.all import ARP, Ether, srp

class ARPScanner:
    def __init__(self):
        self.interface = None
        self.network = None

    def list_interfaces(self):
        return list(psutil.net_if_addrs().keys())

    def select_interface(self, interface_name):
        self.interface = interface_name
        print(f"Selected interface: {self.interface}")

        # Determine the network address based on the selected interface
        addrs = psutil.net_if_addrs()[self.interface]
        for addr in addrs:
            if addr.family == socket.AF_INET:
                ip_addr = addr.address
                netmask = addr.netmask
                self.network = ipaddress.IPv4Network(f"{ip_addr}/{netmask}", strict=False)
                print(f"Network address: {self.network}")
        return self.network

    def arp_scan(self):
        if not self.interface or not self.network:
            raise ValueError("Interface and network must be selected before scanning.")

        # Create an ARP request packet
        arp_request = ARP(pdst=str(self.network))
        broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request

        # Send the packet and capture the response
        answered, unanswered = srp(arp_request_broadcast, iface=self.interface, timeout=1, verbose=False)

        # Parse the response
        devices = []
        for sent, received in answered:
            devices.append({
                "ip": received.psrc,
                "mac": received.hwsrc
            })

        return devices
