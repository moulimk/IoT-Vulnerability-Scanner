import nmap

def nmap_scan(ip_address, comprehensive=False):
    nm = nmap.PortScanner()

    # Choose scan type based on user selection
    if comprehensive:
        scan_command = "-sV -T4 -O --version-light"
    else:
        scan_command = "-sV -T4 -O -F --version-light"

    # Run the scan
    nm.scan(ip_address, arguments=scan_command)
    
    # Initialize data structure
    os = nm[ip_address]['osmatch'][0]['name'] if 'osmatch' in nm[ip_address] and len(nm[ip_address]['osmatch']) > 0 else 'Unknown'
    ports = []
    protocols = []
    services = []
    versions = []

    # Extract details for each open port
    for proto in nm[ip_address].all_protocols():
        for port in nm[ip_address][proto]:
            ports.append(str(port))
            protocols.append(proto)
            service = nm[ip_address][proto][port].get('name', 'Unknown')
            services.append(service)
            version = nm[ip_address][proto][port].get('version', 'Unknown')
            versions.append(version)
    
    return {
        'os': os,
        'ports': ','.join(ports),
        'protocols': ','.join(protocols),
        'services': ','.join(services),
        'versions': ','.join(versions)
    }


def scan_for_open_ports(target_ip, port_range="1-024"):

    nm = nmap.PortScanner()
    nm.scan(target_ip, port_range)  # Scans all ports from 1 to 65535
    
    open_ports = []
    for proto in nm[target_ip].all_protocols():
        lport = nm[target_ip][proto].keys()
        for port in lport:
            state = nm[target_ip][proto][port]['state']
            if state == 'open':
                open_ports.append(port)
    return open_ports

def identify_vulnerable_ports(open_ports):

    # Comprehensive list of known vulnerable ports (this list can be expanded)
    vulnerable_ports = [
        21, 22, 23, 25, 53, 69, 80, 110, 135, 137, 138, 139, 143, 443, 445, 993, 995, 3306, 3389, 5900, 8080, 8443
        # Add more ports based on common vulnerabilities
    ]
    
    detected_vulnerabilities = []
    for port in open_ports:
        if port in vulnerable_ports:
            detected_vulnerabilities.append(port)
            
    return detected_vulnerabilities

