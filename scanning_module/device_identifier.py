import pandas as pd
import os

class DeviceIdentifier:
    def __init__(self, oui_file="data/oui.txt"):
        self.oui_data = self.load_oui_data(oui_file)

    def load_oui_data(self, oui_file):
        oui_data = []
        with open(oui_file, 'r') as file:
            lines = file.readlines()
            for i in range(0, len(lines)):
                line = lines[i].strip()

                if "(hex)" in line:
                    # Normalize hex part (replace '-' with ':')
                    hex_part = line.split()[0].replace('-', ':').lower()
                    organization_name = ' '.join(line.split()[2:])
                    oui_data.append({'assignment': hex_part, 'organization_name': organization_name})

                elif "(base 16)" in line:
                    # Normalize base16 part (no separators)
                    base16_part = line.split()[0].lower()
                    organization_name = ' '.join(line.split()[2:])
                    # Check if the last entry in oui_data already has this organization name, then skip adding it again
                    if not oui_data or oui_data[-1]['organization_name'] != organization_name:
                        oui_data.append({'assignment': base16_part, 'organization_name': organization_name})

        # Convert list to DataFrame and drop duplicates
        oui_df = pd.DataFrame(oui_data).drop_duplicates()
        return oui_df

    def identify(self, mac_address):
        # Normalize the MAC address to match the DataFrame format
        oui_prefix = mac_address.lower()[:8]
        
        # Perform the lookup
        organization = self.oui_data[self.oui_data['assignment'] == oui_prefix]['organization_name']
        
        if not organization.empty:
            print(f"Manufacturer found: {organization.values[0]}")  # Debugging: Confirm a match is found
            return organization.values[0]
        else:
            return "Unknown"

    def get_device_info(self, mac_address, ip_address=None):
        manufacturer = self.identify(mac_address)
        device_type = 'Unknown'

        # Additional logic for nslookup can be added here if needed
        if manufacturer == "Unknown" and ip_address:
            manufacturer = self.fallback_nslookup(ip_address)

        return manufacturer, device_type

    def fallback_nslookup(self, ip_address):
        # Placeholder for nslookup logic if needed
        return "Unknown"

